// src/components/mapa/BaseLayers.jsx

// üì¶ React Hooks
import { useEffect, useRef } from 'react';

// üåç Componentes de controle de camadas do Leaflet via react-leaflet
import {
  LayersControl,   // Componente pai que encapsula m√∫ltiplas camadas base/overlay
  TileLayer,       // Representa um tile de mapa (como OSM, Esri, etc.)
  LayerGroup,      // Agrupa m√∫ltiplas camadas como se fosse uma √∫nica
  WMSTileLayer,
  useMap           // Hook para acessar o mapa atual (inst√¢ncia Leaflet)
} from 'react-leaflet';

// üìå Declara√ß√µes void apenas para evitar warnings de imports n√£o utilizados diretamente
void LayersControl, TileLayer, LayerGroup, WMSTileLayer, useMap;

// üß± Leaflet base (para acesso direto a APIs de baixo n√≠vel, como DOMUtil)
import L from 'leaflet';
void L; // Manter L vis√≠vel para bundlers/linters


/** 
 * Desestrutura√ß√£o do componente `BaseLayer` a partir do `LayersControl` do React-Leaflet.
 * Esse componente representa uma camada base (ex: mapas de fundo como sat√©lite ou OSM),
 * e deve ser usado dentro de `<LayersControl>` para permitir altern√¢ncia entre m√∫ltiplas bases.
 */
const { BaseLayer } = LayersControl;
void BaseLayer; // Garante que o s√≠mbolo seja mantido no bundle final (uso impl√≠cito)

/**
 * ============================
 * == Utilit√°rios DOM/Controle ==
 * ============================
 * Estas fun√ß√µes oferecem compatibilidade entre diferentes formatos de acesso
 * aos containers dos controles do Leaflet (via React-Leaflet ou API nativa).
 */

/**
 * Verifica se o controle fornecido cont√©m um elemento interno do Leaflet.
 * @param {any} controle - Refer√™ncia potencialmente enriquecida com leafletElement
 * @returns {boolean} Verdadeiro se cont√©m um leafletElement v√°lido
 */
function temLeafletElement(controle) {
  return !!controle?.leafletElement;
}

/**
 * Verifica se o elemento do Leaflet possui o m√©todo getContainer().
 * @param {any} controle - Controle do Leaflet
 * @returns {boolean} Se √© poss√≠vel extrair um container do elemento interno
 */
function temLeafletContainer(controle) {
  return temLeafletElement(controle) &&
    typeof controle.leafletElement.getContainer === 'function';
}

/**
 * Verifica se o controle tem um m√©todo getContainer direto (sem usar leafletElement).
 * @param {any} controle - Objeto controle possivelmente customizado
 * @returns {boolean} Se o controle j√° exp√µe getContainer diretamente
 */
function temContainerDireto(controle) {
  return controle?.getContainer;
}

/**
 * Resolve o container DOM via elemento interno do Leaflet.
 * √ötil para controles integrados via react-leaflet.
 * @param {any} controle
 * @returns {HTMLElement|null} Container do controle
 */
function resolveLeafletContainer(controle) {
  return temLeafletContainer(controle)
    ? controle.leafletElement.getContainer()
    : null;
}

/**
 * Resolve o container diretamente (fallback para casos fora do react-leaflet).
 * @param {any} controle
 * @returns {HTMLElement|null}
 */
function resolveDiretoContainer(controle) {
  return temContainerDireto(controle)
    ? controle.getContainer()
    : null;
}

/**
 * Tenta resolver o container DOM do controle, considerando todas as estrat√©gias conhecidas.
 * @param {any} controle - Controle de camadas, bot√£o ou similar
 * @returns {HTMLElement|null} Elemento DOM do container
 */
function resolveContainer(controle) {
  return resolveLeafletContainer(controle)
    ?? resolveDiretoContainer(controle);
}

/**
 * Interface segura para extrair o container do controle.
 * Retorna null se o controle for inv√°lido.
 * @param {any} controle
 * @returns {HTMLElement|null}
 */
function obterContainerDeControle(controle) {
  return controle ? resolveContainer(controle) : null;
}

/**
 * Aplica uma classe CSS personalizada ao container do controle.
 * Permite estiliza√ß√£o espec√≠fica via CSS externo (ex: `.base-layer-control`)
 * @param {any} controle - Controle alvo para estiliza√ß√£o
 */
function aplicarEstiloAoContainer(controle) {
  const container = obterContainerDeControle(controle);
  if (container) {
    container.classList.add('base-layer-control'); // üìå Classe para custom styling
  }
}

/**
 * ‚úÖ Verifica se o controle pode ser atribu√≠do ao mapa Leaflet.
 *
 * @param {L.Map} map - Inst√¢ncia do mapa Leaflet.
 * @param {Object} controle - Controle do Leaflet (ex: LayersControl).
 * @returns {boolean} Retorna `true` se ambos `map` e `controle` estiverem definidos.
 *
 * üîí Utilizado como medida de seguran√ßa antes de atribuir o controle ao mapa,
 * evitando exce√ß√µes por objetos indefinidos.
 */
const podeAtribuirControle = (map, controle) => Boolean(map && controle);

// ===================
// == Componente principal: BaseLayers
// ===================

/**
 * Componente React que injeta o controle de camadas base no mapa Leaflet.
 *
 * Este painel permite ao usu√°rio alternar entre diferentes estilos de mapa (tiles),
 * como OpenStreetMap, Sat√©lite e varia√ß√µes visuais (claro/escuro).
 *
 * Tamb√©m garante que o controle seja acess√≠vel externamente via `map._layersControl`
 * e aplica uma classe customizada para permitir personaliza√ß√£o visual via CSS.
 *
 * @returns {JSX.Element} LayersControl configurado com m√∫ltiplas op√ß√µes de base layer.
 */
export default function BaseLayers() {
  const map = useMap();                  // üåê Hook do Leaflet para obter o mapa atual
  const layersControlRef = useRef();     // üß≠ Refer√™ncia ao controle de camadas

  // üéØ Efeito de inicializa√ß√£o para conectar o controle ao mapa e estilizar
  useEffect(() => {
    const controle = layersControlRef.current;

    // üõ°Ô∏è Evita erros caso mapa ou controle n√£o estejam dispon√≠veis
    if (!podeAtribuirControle(map, controle)) return;

    // üîó Exp√µe o controle dentro do objeto `map` para uso externo (ex: via `map._layersControl`)
    map._layersControl = controle;

    // üé® Aplica uma classe CSS ao container do controle para customiza√ß√£o visual
    aplicarEstiloAoContainer(controle);
  }, [map]);

  return (
    <LayersControl ref={layersControlRef} position="topright">
      {/* == Camadas Base: OSM padr√£o (claro) == */}
      <BaseLayer checked name="OpenStreetMap">
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution="&copy; OpenStreetMap contributors"
        />
      </BaseLayer>

      {/* == Sat√©lite puro (sem r√≥tulos) via Esri == */}
      <BaseLayer name="Sat√©lite (Esri)">
        <TileLayer
          url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
          attribution="Tiles &copy; Esri &mdash; Source: Esri, Maxar, Earthstar Geographics"
          maxZoom={18}
        />
      </BaseLayer>

      {/* == Sat√©lite com r√≥tulos (camadas sobrepostas) == */}
      <BaseLayer name="Sat√©lite com R√≥tulos (Esri)">
        <LayerGroup>
          <TileLayer url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}" />
          <TileLayer
            url="https://services.arcgisonline.com/arcgis/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}"
            attribution="&copy; Esri ‚Äî World Imagery + Boundaries"
          />
        </LayerGroup>
      </BaseLayer>

      {/* == Tema claro do CartoDB == */}
      <BaseLayer name="Carto Light">
        <TileLayer
          url="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png"
          attribution='&copy; <a href="https://carto.com/">CARTO</a>'
        />
      </BaseLayer>

      {/* == Tema escuro do CartoDB == */}
      <BaseLayer name="Carto Dark">
        <TileLayer
          url="https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png"
          attribution='&copy; <a href="https://carto.com/">CARTO</a>'
        />
      </BaseLayer>
      {/* Topografia (OpenTopoMap) */}
      <BaseLayer name="Topografia (OpenTopoMap)">
        <TileLayer
          url="https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://opentopomap.org">OpenTopoMap</a>, &copy; OpenStreetMap contributors'
          maxZoom={17}
        />
      </BaseLayer>

      {/* Humanit√°rio (HOT) */}
      <BaseLayer name="Humanit√°rio (HOT)">
        <TileLayer
          url="https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.hotosm.org">Humanitarian OSM Team</a>, &copy; OpenStreetMap contributors'
        />
      </BaseLayer>

      {/* Mapa de Relevo Sombreado */}
      <BaseLayer name="Relevo (OSM)">
        <TileLayer
          url="https://tile.opentopomap.org/{z}/{x}/{y}.png"
          attribution='<a href="https://opentopomap.org">OpenTopoMap</a>'
          maxZoom={17}
        />
      </BaseLayer>
      <BaseLayer name="Bacias">
        <TileLayer
          url="https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png"
          attribution='CartoDB'
          maxZoom={20}
        />
      </BaseLayer>

      {/* Sat√©lite puro do Google */}
      <BaseLayer name="Sat√©lite (Google)">
        <TileLayer
          url="https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}"
          attribution="Map data &copy;2024 Google"
          maxZoom={20}
        />
      </BaseLayer>

      {/* Sat√©lite puro do Google */}
      <BaseLayer name="Sat√©lite Com R√≥tulos (Google)">
        <TileLayer
          url="https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}"
          attribution="Map data &copy;2024 Google"
          maxZoom={20}
        />
      </BaseLayer>
    </LayersControl>
  );
}
