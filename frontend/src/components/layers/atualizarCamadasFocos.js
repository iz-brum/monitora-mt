// src/components/layers/atualizarCamadasFocos.js

// üß≠ Importa o m√≥dulo principal da biblioteca Leaflet
// Isso permite acesso direto √†s APIs fundamentais para manipula√ß√£o de:
// - camadas (Layer, LayerGroup)
// - controles de mapa (Control, DomUtil)
// - geometrias (LatLng, Bounds, etc.)
// √â essencial para construir, atualizar ou remover camadas personalizadas de focos de calor.
import L from 'leaflet';

//
// == Interface p√∫blica ==
// Estas fun√ß√µes s√£o acess√≠veis externamente. Elas coordenam atualiza√ß√µes no sistema visual
// de camadas e controles do mapa, com seguran√ßa e clareza.
//

/**
 * üîÅ Atualiza visualmente as camadas de focos no mapa.
 *
 * Fun√ß√£o p√∫blica principal ‚Äî deve ser chamada quando:
 * - H√° mudan√ßa nos dados (novos focos).
 * - H√° altera√ß√£o no modo de visualiza√ß√£o (cluster ou simples).
 *
 * @param {Object} deps - Depend√™ncias e estado atual do mapa e focos.
 */
export function atualizarCamadasFocos(deps) {
    if (!podeAtualizarMapa(deps)) return; // üîí Filtro de seguran√ßa: evita renderiza√ß√£o desnecess√°ria.
    executarAtualizacao(deps);            // üß† Orquestra o redesenho dos marcadores e clusters.
}

/**
 * üîò Atualiza o bot√£o de modo de visualiza√ß√£o.
 *
 * Altera o texto do bot√£o (Cluster ‚Üî Simples) com base no estado atual `useCluster`.
 *
 * @param {Object} controlRef - Refer√™ncia ao controle de camadas.
 * @param {boolean} useCluster - Estado atual do modo de visualiza√ß√£o.
 */
export function atualizarBotao(controlRef, useCluster) {
    const btn = obterBotaoModo(controlRef);   // üéØ Busca o bot√£o de altern√¢ncia.
    if (!btn) return;                         // üö´ Bot√£o n√£o dispon√≠vel no DOM ‚Äî ignora com seguran√ßa.
    definirTextoDoBotao(btn, useCluster);     // üîÑ Atualiza o texto vis√≠vel com base no estado atual.
}

//
// == Etapas principais ==
// Estas fun√ß√µes orquestram a atualiza√ß√£o visual das camadas de focos no mapa.
// S√£o chamadas internas pela interface p√∫blica.
//

/**
 * üîê Valida se o mapa e os focos est√£o dispon√≠veis.
 *
 * Previne execu√ß√£o desnecess√°ria do processo de atualiza√ß√£o visual.
 *
 * @param {Object} deps - Deve conter { map, focos }
 * @returns {boolean} true se o mapa estiver pronto e houver focos.
 */
function podeAtualizarMapa({ map, focos }) {
    return map && focos.length > 0;
}

/**
 * üß† Processo completo de atualiza√ß√£o das camadas de focos.
 *
 * Etapas:
 * 1. Limpa camadas anteriores
 * 2. Adiciona novos focos (como marcadores interativos)
 * 3. Aplica agrupamento (cluster) ou exibi√ß√£o simples
 * 4. Atualiza o bot√£o de altern√¢ncia
 * 5. Garante que a camada proxy est√° vis√≠vel no mapa
 *
 * @param {Object} deps - Conjunto completo de refs e estados do mapa
 */
function executarAtualizacao({
    map,
    focos,
    useCluster,
    clusterGroupRef,
    markerLayerRef,
    proxyLayerRef,
    highlightLayerRef,
    controlRef,
    setFocosSelecionados,
    setPosicaoTabela,
    setHighlightData
}) {
    // üßπ Etapa 1: Remove camadas antigas ‚Äî sem res√≠duos visuais.
    limparCamadas(map, clusterGroupRef, markerLayerRef, proxyLayerRef);

    // üî• Etapa 2: Injeta novos focos no mapa com intera√ß√µes.
    adicionarFocos(
        focos,
        map,
        markerLayerRef,
        highlightLayerRef,
        setFocosSelecionados,
        setPosicaoTabela,
        setHighlightData
    );

    // üîÑ Etapa 3: Decide se deve agrupar ou mostrar simples, e aplica no proxy.
    aplicarClusterOuSimples(useCluster, clusterGroupRef, markerLayerRef, proxyLayerRef);

    // üñ≤Ô∏è Etapa 4: Atualiza texto do bot√£o de modo (Cluster/Simples).
    atualizarBotao(controlRef, useCluster);

    // ‚úÖ Etapa 5: Garante que a camada proxy est√° vis√≠vel no mapa.
    garantirLayerAdicionado(map, proxyLayerRef);
}

//
// == Manipula√ß√£o de camadas ==
// Estas fun√ß√µes atuam diretamente nas camadas do Leaflet,
// realizando limpeza, inje√ß√£o e organiza√ß√£o dos marcadores.
//

/**
 * üßπ Remove todas as camadas de marcadores do mapa e limpa seus conte√∫dos.
 *
 * Utilizada antes de qualquer re-renderiza√ß√£o de focos para evitar sobreposi√ß√£o visual ou dados antigos.
 *
 * @param {L.Map} map - Inst√¢ncia do mapa Leaflet
 * @param {Object} clusterRef - Ref para o grupo de clusters
 * @param {Object} markerRef - Ref para camada de marcadores simples
 * @param {Object} proxyRef - Ref para camada intermedi√°ria usada para altern√¢ncia de modo
 */
function limparCamadas(map, clusterRef, markerRef, proxyRef) {
    const clusterGroup = clusterRef.current;
    const markerLayer = markerRef.current;
    const proxyLayer = proxyRef.current;

    map.removeLayer(clusterGroup);    // ‚ùå Remove cluster group da tela
    map.removeLayer(markerLayer);     // ‚ùå Remove camada de marcadores

    proxyLayer.clearLayers();         // ‚ôªÔ∏è Limpa proxy intermedi√°rio
    clusterGroup.clearLayers();       // ‚ôªÔ∏è Limpa todos os clusters
    markerLayer.clearLayers();        // ‚ôªÔ∏è Limpa todos os marcadores
}

/**
 * üî• Adiciona focos como marcadores interativos no mapa.
 *
 * Cria um marker para cada foco e injeta na camada de marcadores.  
 * Cada marker possui evento de clique com destaque visual.
 *
 * @param {Array} focos - Lista de objetos de foco contendo lat/lng
 * @param {L.Map} map - Inst√¢ncia do Leaflet
 * @param {Object} markerLayerRef - Ref para camada de marcadores
 * @param {Object} highlightLayerRef - Ref para camada de destaque visual
 * @param {Function} setFocosSelecionados - Setter para estado de sele√ß√£o
 * @param {Function} setPosicaoTabela - Setter para posi√ß√£o da tabela flutuante
 */
function adicionarFocos(focos, map, markerLayerRef, highlightLayerRef, setFocosSelecionados, setPosicaoTabela, setHighlightData) {
    focos.forEach(foco => {
        const marker = criarMarker(
            foco,
            focos,
            map,
            highlightLayerRef,
            setFocosSelecionados,
            setPosicaoTabela,
            setHighlightData
        );
        markerLayerRef.current.addLayer(marker); // ‚ûï Insere no mapa
    });
}

/**
 * üîÄ Aplica dinamicamente o modo "Cluster" ou "Simples" nos focos.
 *
 * Decide como a camada proxy ser√° organizada de acordo com `useCluster`.
 * O proxyLayer √© a camada intermedi√°ria exibida no controle de camadas.
 *
 * @param {boolean} useCluster - Se true, ativa modo agrupado
 * @param {Object} clusterRef - Ref para grupo de clusters
 * @param {Object} markerRef - Ref para camada de marcadores
 * @param {Object} proxyRef - Ref para camada proxy intermedi√°ria
 */
function aplicarClusterOuSimples(useCluster, clusterRef, markerRef, proxyRef) {
    const clusterGroup = clusterRef.current;
    const markerLayer = markerRef.current;
    const proxyLayer = proxyRef.current;

    if (useCluster) {
        clusterGroup.addLayer(markerLayer);     // üß≤ Envolve marcadores num cluster
        proxyLayer.addLayer(clusterGroup);      // üéØ Exibe o grupo
    } else {
        proxyLayer.addLayer(markerLayer);       // üîì Exibe marcadores diretamente
    }
}

/**
 * ‚úÖ Garante que a camada proxy esteja vis√≠vel no mapa.
 *
 * Necess√°ria quando o mapa pode ter sido limpo ou reinicializado.
 *
 * @param {L.Map} map - Inst√¢ncia do mapa Leaflet
 * @param {Object} proxyRef - Ref para camada intermedi√°ria de focos
 */
function garantirLayerAdicionado(map, proxyRef) {
    const proxyLayer = proxyRef.current;
    if (!map.hasLayer(proxyLayer)) {
        map.addLayer(proxyLayer); // üöÄ Adiciona se estiver ausente
    }
}

/**
 * üìè Converte um raio em metros para √°rea em km¬≤.
 *
 * √Årea = œÄ * r¬≤, depois convertida de m¬≤ para km¬≤.
 * Usada para fins de visualiza√ß√£o ou estat√≠sticas.
 *
 * @param {number} raio - Raio em metros
 * @returns {string} √Årea formatada com 2 casas decimais (pt-BR)
 */
export function formatAreaKm2(raio) {
    const areaKm2 = (Math.PI * raio * raio) / 1_000_000;
    return areaKm2.toLocaleString('pt-BR', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
}
void formatAreaKm2 // Evita warning de fun√ß√£o exportada n√£o usada

//
// == Cria√ß√£o de marcador ==
// Cada marcador representa um foco t√©rmico no mapa Leaflet.
// Ao ser clicado, ele:
// - Calcula os focos pr√≥ximos
// - Gera um c√≠rculo de destaque visual
// - Atualiza o texto do painel flutuante
// - Posiciona o componente de detalhes de forma precisa
//

/**
 * üî¥ Cria um marcador interativo para representar um foco de calor.
 *
 * Cada marcador √© um c√≠rculo laranja/vermelho com evento de clique:
 * - Agrupa focos pr√≥ximos
 * - Calcula centro e raio de influ√™ncia
 * - Atualiza a camada de destaque (highlight)
 * - Posiciona o painel de detalhes no mapa
 *
 * @param {Object} foco - Objeto representando o foco atual (latitude, longitude, etc.)
 * @param {Array<Object>} focos - Lista completa de focos renderizados
 * @param {L.Map} map - Inst√¢ncia do mapa Leaflet
 * @param {Object} highlightLayerRef - Ref para a camada de destaque visual (c√≠rculo)
 * @param {Function} setFocosSelecionados - Setter para o estado de focos agrupados
 * @param {Function} setPosicaoTabela - Setter para coordenadas da tabela flutuante
 * @returns {L.CircleMarker} Inst√¢ncia do marcador configurado
 */
function criarMarker(foco, focos, map, highlightLayerRef, setFocosSelecionados, setPosicaoTabela, setHighlightData) {
    const { latitude, longitude } = foco;
    let circuloAtual = null;
    let focosProximos = null; // Armazena os focos pr√≥ximos para rec√°lculos

    const marker = L.marker([latitude, longitude], {
        icon: L.divIcon({
            className: '',
            iconSize: [10, 10],
            iconAnchor: [5, 10], // √¢ncora na ponta inferior
            html: `
            <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10">
                <polygon points="5,0 0,10 10,10" fill="yellow" stroke="red" stroke-width="0.8" />
            </svg>
        `
        })
    });

    marker.on('click', e => {
        L.DomEvent.stopPropagation(e);

        // Armazena focos pr√≥ximos para rec√°lculos posteriores
        focosProximos = focos.filter(f =>
            Math.abs(f.latitude - latitude) < 0.1 &&
            Math.abs(f.longitude - longitude) < 0.1
        );

        const centro = calcularCentro(focosProximos);
        const raio = focosProximos.length <= 1
            ? 1000
            : calcularRaioDinamico(focosProximos, map);

        const formattedArea = formatAreaKm2(raio);

        setTimeout(() => {
            const headerStrong = document.querySelector('.foco-header strong');
            if (headerStrong) {
                headerStrong.textContent = `Focos de calor (${focosProximos.length}) ‚Äì √Årea: ${formattedArea} km¬≤`;
            }
        }, 0);

        highlightLayerRef.current.clearLayers();
        circuloAtual = L.circle(centro, {
            radius: raio,
            color: '#8A2BE2',
            weight: 2,
            fillOpacity: 0.25,
            fillColor: '#8A2BE2'
        });

        highlightLayerRef.current.addLayer(circuloAtual);
        map.addLayer(highlightLayerRef.current);

        const pixel = map.latLngToContainerPoint([latitude, longitude]);
        setFocosSelecionados(focosProximos);
        setPosicaoTabela({ x: pixel.x + 20, y: pixel.y });

        // Salva o "c√≠rculo" de destaque para futuro redraw
        setHighlightData({
            centro,
            raio,
            focos: focosProximos
        });
    });
    return marker;
}

/**
 * üìå Calcula o centroide (ponto m√©dio) de um conjunto de focos.
 *
 * Soma todas as latitudes e longitudes e divide pelo total.
 *
 * @param {Array<Object>} focos - Lista de focos com latitude/longitude
 * @returns {L.LatLng} Centro geogr√°fico aproximado
 */
function calcularCentro(focos) {
    const lat = focos.reduce((sum, f) => sum + f.latitude, 0) / focos.length;
    const lng = focos.reduce((sum, f) => sum + f.longitude, 0) / focos.length;
    return L.latLng(lat, lng);
}

/**
 * üìè Calcula o raio visual din√¢mico em metros com base na dispers√£o dos focos.
 *
 * Mede a dist√¢ncia entre o centro do grupo e o ponto mais distante,
 * e adiciona um buffer de 1km para garantir clareza visual.
 *
 * @param {Array<Object>} focos - Lista de focos
 * @param {L.Map} map - Inst√¢ncia do Leaflet para c√°lculo geod√©sico
 * @returns {number} Raio em metros
 */
function calcularRaioDinamico(focos, map) {
    if (!focos.length) return 1000;

    const centro = calcularCentro(focos);

    const maxDist = focos.reduce((max, f) => {
        const d = map.distance(centro, [f.latitude, f.longitude]);
        return d > max ? d : max;
    }, 0);

    return maxDist + 1000; // Buffer extra para visualiza√ß√£o
}

//
// == Bot√£o: altern√¢ncia de texto ==
// Este bloco controla a visibilidade e o conte√∫do do bot√£o de altern√¢ncia de modo de visualiza√ß√£o dos focos.
// Ele atua diretamente no DOM, dentro do container do controle de camadas do Leaflet.
//

/**
 * üñäÔ∏è Atualiza o texto interno do bot√£o de altern√¢ncia.
 *
 * O bot√£o permite que o usu√°rio escolha entre visualiza√ß√£o em modo "Cluster" (agrupado)
 * ou "Simples" (cada marcador individual). O texto serve como feedback e controle direto.
 *
 * @param {HTMLElement} botao - Refer√™ncia ao elemento de bot√£o no DOM
 * @param {boolean} useCluster - Estado atual: true para modo agrupado
 */
function definirTextoDoBotao(botao, useCluster) {
    botao.innerHTML = useCluster ? 'Cluster' : 'Simples'; // üîÅ Atualiza o texto conforme o modo ativo
}

/**
 * üîç Localiza o bot√£o de altern√¢ncia no container do controle Leaflet.
 *
 * Busca o bot√£o respons√°vel por trocar o modo de visualiza√ß√£o no painel de camadas.
 * Opera com seguran√ßa: retorna `null` se o bot√£o ou container n√£o existir.
 *
 * @param {Object} controlRef - Refer√™ncia React/Leaflet para o controle de camadas
 * @returns {HTMLElement|null} - Elemento do bot√£o encontrado, ou null
 */
function obterBotaoModo(controlRef) {
    const container = obterContainer(controlRef); // üß± Busca o container DOM do controle Leaflet
    if (!container) return null;                 // üö´ Evita erro se o controle ainda n√£o est√° montado
    return obterBotaoToggle(container);          // üéØ Retorna o bot√£o DOM com a classe `.toggle-mode`
}

//
// == Utils DOM / refs ==
// üîß Utilit√°rios para acesso e valida√ß√£o de refer√™ncias (refs) e elementos do DOM.
//
// Estas fun√ß√µes s√£o fundamentais para interagir com a estrutura do Leaflet dentro de React,
// garantindo seguran√ßa, clareza e robustez no acesso a containers e elementos.
//

/**
 * üéØ Localiza o bot√£o de altern√¢ncia (.toggle-mode) dentro de um container DOM.
 *
 * @param {HTMLElement|null} container - Elemento HTML esperado como container
 * @returns {HTMLElement|null} - Bot√£o encontrado ou null se n√£o for poss√≠vel acessar
 */
function obterBotaoToggle(container) {
    return podeSelecionar(container)
        ? container.querySelector('.toggle-mode') // üîç Busca pelo seletor CSS
        : null;                                   // ‚ö†Ô∏è Fallback seguro se container inv√°lido
}

/**
 * üì¶ Acessa o DOM container de um controle Leaflet a partir de uma ref React.
 *
 * Verifica se a ref est√° populada, e se seu objeto possui o m√©todo `getContainer()`.
 * Essa abordagem protege contra erros em ciclos de montagem e render.
 *
 * @param {Object} ref - Ref React com controle Leaflet
 * @returns {HTMLElement|null} - Container DOM ou null
 */
function obterContainer(ref) {
    const current = obterCurrentRef(ref);       // üß≤ Ref segura
    if (!temGetContainer(current)) return null; // üö´ Protege contra acessos inv√°lidos
    return current.getContainer();              // ‚úÖ Retorna container se tudo estiver correto
}

/**
 * üßº Extrai .current da ref somente se estiver definida e v√°lida.
 *
 * @param {Object} ref - Ref React
 * @returns {any|null} - Valor armazenado em .current ou null
 */
function obterCurrentRef(ref) {
    return refValido(ref) ? ref.current : null;
}

/**
 * ‚úÖ Verifica se a ref React est√° corretamente definida.
 *
 * @param {any} ref - Objeto de ref
 * @returns {boolean} - true se a ref existe e est√° populada
 */
function refValido(ref) {
    return !!ref && !!ref.current;
}

/**
 * üß† Verifica se um objeto possui o m√©todo `getContainer()`.
 * Usado para checar se o objeto implementa a interface esperada de controle Leaflet.
 *
 * @param {any} obj - Objeto que pode ou n√£o ser um controle Leaflet
 * @returns {boolean} - true se possui getContainer()
 */
function temGetContainer(obj) {
    return obj && typeof obj.getContainer === 'function';
}

/**
 * üß¨ Valida se um elemento DOM √© capaz de realizar buscas com querySelector.
 *
 * @param {any} el - Elemento DOM
 * @returns {boolean} - true se for um Node com m√©todo querySelector
 */
function podeSelecionar(el) {
    return !!el && typeof el.querySelector === 'function';
}
