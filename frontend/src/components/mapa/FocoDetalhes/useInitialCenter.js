// src/components/mapa/FocoDetalhes/useInitialCenter.js

/**
 * ‚öõÔ∏è React Hook
 *
 * Importa o hook `useLayoutEffect` do React, que √© semelhante ao `useEffect`,
 * por√©m executado ap√≥s todas as muta√ß√µes DOM, antes que o navegador atualize visualmente a tela.
 * Ideal para manipula√ß√µes imediatas do DOM que requerem sincronicidade visual.
 */
import { useLayoutEffect } from 'react';

/**
 * üìè getElementRect
 *
 * Fun√ß√£o auxiliar que retorna as dimens√µes (`DOMRect`) do elemento referenciado.
 * Caso o elemento ainda n√£o esteja dispon√≠vel, retorna um fallback com dimens√µes zeradas.
 *
 * @param {React.RefObject<HTMLElement>} ref - Refer√™ncia ao elemento DOM
 * @returns {{ width: number, height: number }} Dimens√µes do elemento ou fallback vazio
 */
function getElementRect(ref) {
  const el = ref.current;
  return el
    ? el.getBoundingClientRect()
    : { width: 0, height: 0 };
}

/**
 * üéØ computeCenterPosition
 *
 * Fun√ß√£o auxiliar que calcula a posi√ß√£o central da janela com base nas dimens√µes fornecidas.
 *
 * @param {{ width: number, height: number }} dimensions - Largura e altura do elemento
 * @returns {{ x: number, y: number }} Coordenadas para posicionar o elemento centralizado
 */
function computeCenterPosition({ width, height }) {
  return {
    x: window.innerWidth / 2 - width / 2,
    // x ao centro: 1/2 da tela
    y: window.innerHeight / 5 - height / 2
    // y pr√≥ximo do topo: 1/5 da tela
  };
}

/**
 * üìå useInitialCenter
 *
 * Hook que posiciona inicialmente o painel flutuante no centro da tela.
 * Caso receba uma posi√ß√£o inicial (`posicaoInicial`), utiliza-a diretamente.
 * Caso contr√°rio, calcula automaticamente a posi√ß√£o central.
 *
 * @param {React.RefObject<HTMLElement>} ref - Refer√™ncia ao container DOM do painel
 * @param {{ x: number, y: number } | undefined} posicaoInicial - Posi√ß√£o inicial opcional
 * @param {Function} setPos - Fun√ß√£o para atualizar a posi√ß√£o do painel
 */
export function useInitialCenter(ref, posicaoInicial, setPos) {
  useLayoutEffect(() => {
    // Se houver posi√ß√£o inicial definida, utiliza diretamente
    if (posicaoInicial) {
      setPos(posicaoInicial);
      return;
    }

    // Calcula automaticamente a posi√ß√£o central com base nas dimens√µes
    const rect = getElementRect(ref);
    setPos(computeCenterPosition(rect));
  }, [ref, posicaoInicial, setPos]);
}
