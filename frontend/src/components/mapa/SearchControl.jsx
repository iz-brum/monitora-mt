// src/components/mapa/SearchControl.jsx

/**
 * ‚è∞ React Hooks
 *
 * - useEffect: Gerencia efeitos colaterais, especialmente integra√ß√£o com plugins externos.
 * - useRef: Cria refer√™ncias persistentes a elementos ou valores, sem causar novos renders.
 */
import { useEffect, useRef } from 'react';

/**
 * üåç React-Leaflet Hook
 *
 * Importa o hook `useMap`, fornecendo acesso √† inst√¢ncia do mapa Leaflet atual.
 */
import { useMap } from 'react-leaflet';

/**
 * üó∫Ô∏è Leaflet Core
 *
 * Importa a biblioteca principal do Leaflet (`L`), base para extens√µes e plugins do mapa.
 */
import L from 'leaflet';

/**
 * üß≠ Leaflet Control Geocoder
 *
 * Plugin para adicionar um controle de busca por geocodifica√ß√£o ao mapa.
 * Permite ao usu√°rio pesquisar localidades diretamente no mapa.
 */
import 'leaflet-control-geocoder';

/**
 * üé® Leaflet Geocoder Styles
 *
 * Importa o CSS necess√°rio para estiliza√ß√£o do controle de geocodifica√ß√£o.
 */
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';

/**
 * ü™¥ React DOM
 *
 * Importa `createRoot` para criar o ponto de montagem da aplica√ß√£o React em uma √°rvore de componentes moderna,
 * permitindo o uso do modo concorrente (Concurrent Mode) e outras otimiza√ß√µes do React 18+.
 */
import { createRoot } from 'react-dom/client';

/**
 * üìç GeocodedFeatureViewer
 *
 * Importa o componente respons√°vel por exibir os detalhes da fei√ß√£o geocodificada no layout da aplica√ß√£o.
 */
import GeocodedFeatureViewer from '@components/layout/GeocodedFeatureViewer';
void GeocodedFeatureViewer; // üîí Garante inclus√£o no bundle, mesmo sem uso direto no JSX

/**
 * ‚öôÔ∏è configurarGeocoder
 *
 * Adiciona ao mapa Leaflet um controle de geocodifica√ß√£o (busca de endere√ßo).
 * Garante que o controle seja adicionado apenas uma vez e integra busca reversa
 * para detalhar o endere√ßo selecionado pelo usu√°rio.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {Function} adicionarMarcador - Fun√ß√£o para adicionar marcador no mapa com detalhes de endere√ßo
 */
function configurarGeocoder(map, adicionarMarcador) {
  if (map._geocoderAdded) return;

  const geocoder = L.Control.geocoder({
    defaultMarkGeocode: false,
    position: 'topleft',
    placeholder: 'Buscar endere√ßo...',
    geocoder: L.Control.Geocoder.nominatim()
  });

  geocoder.on('markgeocode', async (e) => {
    const { center } = e.geocode;
    const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${center.lat}&lon=${center.lng}`);
    const data = await res.json();
    adicionarMarcador(center.lat, center.lng, data.address || {});
    map.setView(center, 14);
  });

  geocoder.addTo(map);
  map._geocoderAdded = true;
}

/**
 * üö´ deveIgnorarClique
 *
 * Fun√ß√£o auxiliar que determina se o clique no mapa deve ser ignorado,
 * normalmente quando o evento de clique j√° foi tratado por outra feature.
 *
 * @param {Object} e - Evento de clique do Leaflet
 * @returns {boolean} True se o clique deve ser ignorado
 */
function deveIgnorarClique(e) {
  return !!e.originalEvent?.__featureClick;
}

/**
 * üñ±Ô∏è registrarCliqueNoMapa
 *
 * Remove listeners antigos e registra um novo listener de clique no mapa Leaflet,
 * encaminhando o evento para o tratamento adequado.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {Function} adicionarMarcador - Fun√ß√£o para adicionar marcador no mapa
 */
function registrarCliqueNoMapa(map, adicionarMarcador) {
  map.off('click');
  map.on('click', (e) => tratarCliqueNoMapa(e, adicionarMarcador));
}

/**
 * üñ±Ô∏è tratarCliqueNoMapa
 *
 * Fun√ß√£o principal que trata o clique do usu√°rio no mapa.
 * Ignora cliques em features j√° tratadas e tenta adicionar um novo marcador com endere√ßo.
 *
 * @param {Object} e - Evento de clique do Leaflet (cont√©m latlng e originalEvent)
 * @param {Function} adicionarMarcador - Fun√ß√£o para adicionar marcador ao mapa
 */
async function tratarCliqueNoMapa(e, adicionarMarcador) {
  if (deveIgnorarClique(e)) return;

  await tentarAdicionarMarcador(e.latlng, adicionarMarcador);
}

/**
 * üìç tentarAdicionarMarcador
 *
 * Tenta obter o endere√ßo via geocodifica√ß√£o reversa e adicionar um marcador ao mapa.
 * Em caso de erro, trata a exce√ß√£o.
 *
 * @param {{ lat: number, lng: number }} param0 - Coordenadas do ponto clicado
 * @param {Function} adicionarMarcador - Fun√ß√£o para adicionar marcador ao mapa
 */
async function tentarAdicionarMarcador({ lat, lng }, adicionarMarcador) {
  try {
    const endereco = await obterEnderecoViaReverso(lat, lng);
    adicionarMarcador(lat, lng, endereco);
  } catch (err) {
    tratarErroGeocodificacao(err);
  }
}

/**
 * ‚ö†Ô∏è tratarErroGeocodificacao
 *
 * Encapsula o tratamento de erros ocorridos durante a geocodifica√ß√£o reversa.
 * Atualmente apenas faz o log, mas pode ser expandido para exibir feedback ao usu√°rio.
 *
 * @param {Error} err - Erro capturado durante a geocodifica√ß√£o
 */
function tratarErroGeocodificacao(err) {
  logErroGeocodificacao(err);
}

/**
 * üì¶ obterEnderecoViaReverso
 *
 * Obt√©m o endere√ßo de um ponto geogr√°fico via requisi√ß√£o reversa
 * e retorna apenas o endere√ßo seguro (ou objeto vazio).
 *
 * @param {number} lat - Latitude do ponto
 * @param {number} lng - Longitude do ponto
 * @returns {Promise<Object>} Endere√ßo retornado ou objeto vazio
 */
async function obterEnderecoViaReverso(lat, lng) {
  const data = await buscarEnderecoReverso(lat, lng);
  return obterEnderecoSeguro(data);
}

/**
 * üåê buscarEnderecoReverso
 *
 * Realiza uma requisi√ß√£o √† API Nominatim (OpenStreetMap) para obter dados completos de endere√ßo
 * a partir de coordenadas geogr√°ficas.
 *
 * @param {number} lat - Latitude do ponto
 * @param {number} lng - Longitude do ponto
 * @returns {Promise<Object>} Dados retornados da API Nominatim
 */
async function buscarEnderecoReverso(lat, lng) {
  const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
  const res = await fetch(url);
  return res.json();
}

/**
 * üõ°Ô∏è obterEnderecoSeguro
 *
 * Garante que ser√° retornado apenas o endere√ßo do resultado, ou objeto vazio se inexistente.
 *
 * @param {Object} data - Objeto retornado da API Nominatim
 * @returns {Object} Endere√ßo extra√≠do ou objeto vazio
 */
function obterEnderecoSeguro(data) {
  return data.address || {};
}

/**
 * ü™≤ logErroGeocodificacao
 *
 * Fun√ß√£o utilit√°ria para registrar erros ocorridos durante a geocodifica√ß√£o reversa no console,
 * facilitando o debugging.
 *
 * @param {Error} err - Objeto de erro capturado
 */
function logErroGeocodificacao(err) {
  console.error('[Reverse Geocoding] Erro ao buscar endere√ßo:', err);
}

/**
 * ‚éã registrarEscapeHandler
 *
 * Registra um listener global para a tecla "Escape". Ao pressionar Escape,
 * a fun√ß√£o `limparTodosMarcadores` √© chamada. Retorna uma fun√ß√£o para remo√ß√£o do listener.
 *
 * @param {Function} limparTodosMarcadores - Fun√ß√£o para limpar todos os marcadores do mapa
 * @returns {Function} Fun√ß√£o para remover o listener de teclado
 */
function registrarEscapeHandler(limparTodosMarcadores) {
  const handler = (e) => {
    if (e.key === 'Escape') {
      limparTodosMarcadores();
    }
  };
  document.addEventListener('keydown', handler);
  return () => document.removeEventListener('keydown', handler);
}

/**
 * üóëÔ∏è limparTodosMarcadoresDoMapa
 *
 * Remove todos os marcadores do mapa e limpa a refer√™ncia √† lista de marcadores.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia √† lista de marcadores adicionados
 */
function limparTodosMarcadoresDoMapa(map, markersRef) {
  markersRef.current.forEach((m) => map.removeLayer(m));
  markersRef.current = [];
}

/**
 * ü™ü currentHud
 *
 * Vari√°vel global que armazena a inst√¢ncia atual do HUD flutuante no mapa,
 * permitindo controle e atualiza√ß√£o de suas entradas sem m√∫ltiplas inst√¢ncias concorrentes.
 *
 * @type {Object|null}
 */
let currentHud = null;

/**
 * üìä mostrarHudComTabela
 *
 * Gerencia a exibi√ß√£o de um HUD (painel flutuante) contendo tabela de endere√ßos e coordenadas no mapa Leaflet.
 * Se j√° existe um HUD, adiciona ou ativa a entrada correspondente; caso contr√°rio, cria um novo HUD.
 *
 * @param {Object} leafletMap - Inst√¢ncia do mapa Leaflet
 * @param {Object} address - Objeto de endere√ßo geocodificado
 * @param {number} lat - Latitude da localiza√ß√£o
 * @param {number} lng - Longitude da localiza√ß√£o
 */
function mostrarHudComTabela(leafletMap, address, lat, lng) {
  const chave = gerarChaveLatLng(lat, lng);
  const novaEntrada = { ...address, lat, lng };

  if (currentHud) {
    lidarComHudExistente(chave, novaEntrada, leafletMap);
    return;
  }

  criarNovaHud(chave, novaEntrada, leafletMap);
}

/**
 * ‚ôªÔ∏è lidarComHudExistente
 *
 * Atualiza o HUD existente, ativando a entrada j√° presente ou adicionando uma nova entrada.
 * Atualiza o √≠ndice ativo para a entrada correspondente e re-renderiza o componente HUD.
 *
 * @param {string} chave - Chave √∫nica para identificar a entrada (baseada em lat/lng)
 * @param {Object} novaEntrada - Dados completos da entrada (endere√ßo + coordenadas)
 * @param {Object} leafletMap - Inst√¢ncia do mapa Leaflet
 */
function lidarComHudExistente(chave, novaEntrada, leafletMap) {
  const indexExistente = currentHud.entries.findIndex(
    (e) => gerarChaveLatLng(e.lat, e.lng) === chave
  );

  if (indexExistente !== -1) {
    currentHud.activeIndex = indexExistente;
  } else {
    currentHud.entries.push(novaEntrada);
    currentHud.activeIndex = currentHud.entries.length - 1;
  }

  currentHud.root.render(criarComponente(leafletMap));
}

/**
 * üÜï criarNovaHud
 *
 * Cria um novo HUD (painel flutuante) no mapa Leaflet, inicializando seu estado e propriedades,
 * e renderiza o componente HUD pela primeira vez.
 *
 * @param {string} chave - Chave √∫nica identificadora (baseada em lat/lng)
 * @param {Object} entrada - Dados completos da entrada inicial (endere√ßo + coordenadas)
 * @param {Object} leafletMap - Inst√¢ncia do mapa Leaflet
 */
function criarNovaHud(chave, entrada, leafletMap) {
  const { container, root } = criarContainerDeHud();
  const handleClose = () => removerHud(container, root);

  currentHud = {
    chave,
    entries: [entrada],
    activeIndex: 0,
    root,
    container,
    props: {
      leafletMap,
      onSelectTab: (index) => {
        currentHud.activeIndex = index;
        root.render(criarComponente(leafletMap));
      },
      onCloseTab: (index) => {
        if (deveFecharHud(index)) {
          return removerHud(container, root);
        }

        processarFechamentoDeAba(index, leafletMap, root);
      },
      onClose: handleClose
    }
  };

  root.render(criarComponente(leafletMap));
}

/**
 * ‚ùå deveFecharHud
 *
 * Determina se o HUD deve ser totalmente fechado com base no √≠ndice da aba e
 * na quantidade de entradas ainda existentes.
 *
 * @param {number} index - √çndice da aba selecionada para fechamento
 * @returns {boolean} True se o HUD deve ser fechado
 */
function deveFecharHud(index) {
  return index === -1 || currentHud.entries.length === 1;
}

/**
 * üóÇÔ∏è processarFechamentoDeAba
 *
 * Remove uma entrada (aba) do HUD, ajusta o √≠ndice da aba ativa e re-renderiza o componente HUD.
 *
 * @param {number} index - √çndice da aba a ser removida
 * @param {Object} leafletMap - Inst√¢ncia do mapa Leaflet
 * @param {Object} root - Inst√¢ncia do React root usada para renderiza√ß√£o
 */
function processarFechamentoDeAba(index, leafletMap, root) {
  currentHud.entries.splice(index, 1);
  ajustarAbaAtiva(index);
  root.render(criarComponente(leafletMap));
}

/**
 * üîÑ ajustarAbaAtiva
 *
 * Garante que o √≠ndice da aba ativa permane√ßa v√°lido ap√≥s remo√ß√£o de uma aba,
 * ajustando o valor conforme necess√°rio.
 *
 * @param {number} indexRemovido - √çndice da aba que foi removida
 */
function ajustarAbaAtiva(indexRemovido) {
  tentarReduzirIndice(indexRemovido);
  tentarAjustarParaUltimaAba();
}

/**
 * ‚¨áÔ∏è tentarReduzirIndice
 *
 * Reduz o √≠ndice da aba ativa se uma aba anterior foi removida,
 * mantendo a sele√ß√£o na aba correta.
 *
 * @param {number} indexRemovido - √çndice da aba removida
 */
function tentarReduzirIndice(indexRemovido) {
  if (currentHud.activeIndex > indexRemovido) {
    currentHud.activeIndex--;
  }
}

/**
 * üîö tentarAjustarParaUltimaAba
 *
 * Ajusta o √≠ndice da aba ativa caso ele fique fora do limite ap√≥s remo√ß√£o de uma aba,
 * garantindo que sempre a √∫ltima aba v√°lida seja selecionada.
 */
function tentarAjustarParaUltimaAba() {
  if (currentHud.activeIndex >= currentHud.entries.length) {
    currentHud.activeIndex = currentHud.entries.length - 1;
  }
}

/**
 * üß© criarComponente
 *
 * Cria e retorna o componente <GeocodedFeatureViewer /> configurado com os dados do HUD atual.
 *
 * @param {Object} leafletMap - Inst√¢ncia do mapa Leaflet (passada como prop)
 * @returns {JSX.Element} Componente React pronto para renderiza√ß√£o
 */
function criarComponente(leafletMap) {
  return (
    <GeocodedFeatureViewer
      entries={currentHud.entries}
      activeIndex={currentHud.activeIndex}
      onSelectTab={currentHud.props.onSelectTab}
      onCloseTab={currentHud.props.onCloseTab}
      onClose={currentHud.props.onClose}
      leafletMap={leafletMap}
    />
  );
}

/**
 * üîë gerarChaveLatLng
 *
 * Gera uma chave √∫nica baseada em latitude e longitude, com 5 casas decimais.
 *
 * @param {number} lat - Latitude
 * @param {number} lng - Longitude
 * @returns {string} Chave formatada no padr√£o "lat|lng"
 */
function gerarChaveLatLng(lat, lng) {
  return `${lat.toFixed(5)}|${lng.toFixed(5)}`;
}

/**
 * üèóÔ∏è criarContainerDeHud
 *
 * Cria um novo elemento container na √°rvore DOM para o HUD flutuante e
 * inicializa um React root usando `createRoot`. Retorna ambos para controle do HUD.
 *
 * @returns {{ container: HTMLDivElement, root: React.Root }} Container DOM e React root prontos para uso
 */
function criarContainerDeHud() {
  const container = document.createElement('div');
  document.body.appendChild(container);
  const root = createRoot(container);
  return { container, root };
}

/**
 * üóëÔ∏è removerHud
 *
 * Remove o HUD flutuante do DOM, desmonta o React root e zera a refer√™ncia global.
 *
 * @param {HTMLDivElement} container - Elemento container criado para o HUD
 * @param {React.Root} root - Inst√¢ncia do React root associada ao HUD
 */
function removerHud(container, root) {
  root.unmount();
  document.body.removeChild(container);
  currentHud = null;
}

/**
 * üìç adicionarMarcadorNoMapa
 *
 * Adiciona um marcador ao mapa Leaflet nas coordenadas especificadas, anexando dados do endere√ßo.
 * Permite intera√ß√£o de reabertura da HUD ao clicar e remo√ß√£o ao clicar com o bot√£o direito.
 * Garante que o marcador seja rastreado pela refer√™ncia de marcadores (`markersRef`).
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia ao array de marcadores no mapa
 * @param {number} lat - Latitude do marcador
 * @param {number} lng - Longitude do marcador
 * @param {Object} address - Objeto com dados do endere√ßo a serem vinculados ao marcador
 */
function adicionarMarcadorNoMapa(map, markersRef, lat, lng, address) {
  const marker = L.marker([lat, lng], {
    geocodeData: { ...address, lat: lat.toFixed(5), lng: lng.toFixed(5) } // ‚Üê üß†
  }).addTo(map);

  // ‚úÖ Reabre a HUD ao clicar no marcador
  marker.on('click', (e) => {
    L.DomEvent.stopPropagation(e);

    const data = e.target.options.geocodeData;
    mostrarHudComTabela(map, data, lat, lng);
  });

  // üóëÔ∏è Remove marcador e aba correspondente no HUD ao clicar com o bot√£o direito
  marker.on('contextmenu', () => {
    map.removeLayer(marker);
    markersRef.current = markersRef.current.filter((m) => m !== marker);

    // Fecha apenas a aba correspondente no HUD, se existir
    if (currentHud) {
      const chave = gerarChaveLatLng(lat, lng);
      const index = currentHud.entries.findIndex(
        (e) => gerarChaveLatLng(e.lat, e.lng) === chave
      );

      if (index !== -1) {
        processarFechamentoDeAba(index, map, currentHud.root);
      }
    }
  });

  markersRef.current.push(marker);

  // Sempre mostra o HUD para o novo marcador
  // mostrarHudComTabela(map, address, lat, lng);
}

/**
 * üßπ prepararLimpeza
 *
 * Cria uma fun√ß√£o para limpar todos os marcadores do mapa quando chamada.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia ao array de marcadores
 * @returns {Function} Fun√ß√£o que, ao ser chamada, remove todos os marcadores do mapa
 */
function prepararLimpeza(map, markersRef) {
  return () => limparTodosMarcadoresDoMapa(map, markersRef);
}

/**
 * ‚ûï criarAdicionadorDeMarcador
 *
 * Retorna uma fun√ß√£o de conveni√™ncia que adiciona um marcador ao mapa usando os par√¢metros fornecidos.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia ao array de marcadores
 * @returns {Function} Fun√ß√£o que adiciona um marcador ao mapa
 */
function criarAdicionadorDeMarcador(map, markersRef) {
  return (lat, lng, address) => adicionarMarcadorNoMapa(map, markersRef, lat, lng, address);
}

/**
 * üö´ deveIgnorarConfiguracao
 *
 * Determina se a configura√ß√£o de intera√ß√µes no mapa deve ser ignorada,
 * caso o mapa n√£o esteja dispon√≠vel ou o Geocoder n√£o esteja carregado.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @returns {boolean} True se a configura√ß√£o deve ser ignorada
 */
function deveIgnorarConfiguracao(map) {
  return !map || !L.Control.Geocoder;
}

/**
 * ‚öôÔ∏è configurarInteracoesDoMapa
 *
 * Inicializa a configura√ß√£o de todos os eventos e intera√ß√µes do mapa,
 * caso o mapa e o Geocoder estejam dispon√≠veis.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia ao array de marcadores
 * @returns {any} Retorno da fun√ß√£o de configura√ß√£o de eventos, caso aplic√°vel
 */
function configurarInteracoesDoMapa(map, markersRef) {
  if (deveIgnorarConfiguracao(map)) return;

  return configurarTodosEventos(map, markersRef);
}

/**
 * üß© configurarTodosEventos
 *
 * Orquestra a configura√ß√£o de todos os eventos do mapa e do geocoder.
 * Retorna uma fun√ß√£o de limpeza (tecla Escape) para remover todos os marcadores.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia ao array de marcadores
 * @returns {Function} Fun√ß√£o de cleanup (remover marcadores ao pressionar Escape)
 */
function configurarTodosEventos(map, markersRef) {
  const limpar = prepararLimpeza(map, markersRef);
  const adicionar = criarAdicionadorDeMarcador(map, markersRef);

  configurarEventosDeMapa(map, adicionar, markersRef);
  configurarEventosDeGeocoder(map, adicionar);

  return registrarEscapeHandler(limpar);
}

/**
 * üó∫Ô∏è configurarEventosDeMapa
 *
 * Configura o evento de clique no mapa para adicionar marcadores.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {Function} adicionar - Fun√ß√£o para adicionar marcador ao mapa
 * @param {React.MutableRefObject<Array>} markersRef - Refer√™ncia ao array de marcadores
 */
function configurarEventosDeMapa(map, adicionar, markersRef) {
  registrarCliqueNoMapa(map, adicionar, markersRef);
}

/**
 * üì¶ configurarEventosDeGeocoder
 *
 * Adiciona o controle de geocodifica√ß√£o ao mapa e integra o evento de adicionar marcador.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {Function} adicionar - Fun√ß√£o para adicionar marcador ao mapa
 */
function configurarEventosDeGeocoder(map, adicionar) {
  configurarGeocoder(map, adicionar);
}

/**
 * üö´ removerEventosDoMapa
 *
 * Remove todos os listeners de clique do mapa Leaflet.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 */
function removerEventosDoMapa(map) {
  if (map) {
    map.off('click');
  }
}

/**
 * üßΩ executarRemocaoSeFuncao
 *
 * Executa a fun√ß√£o recebida para remover o listener do Escape, caso seja de fato uma fun√ß√£o.
 *
 * @param {Function|any} removerEscape - Fun√ß√£o de cleanup (ou qualquer valor)
 */
function executarRemocaoSeFuncao(removerEscape) {
  if (typeof removerEscape === 'function') {
    removerEscape();
  }
}

/**
 * üßπ limparInteracoes
 *
 * Remove todos os eventos e listeners relacionados ao mapa e tecla Escape.
 *
 * @param {Object} map - Inst√¢ncia do mapa Leaflet
 * @param {Function|any} removerEscape - Fun√ß√£o para remover listener de Escape
 */
function limparInteracoes(map, removerEscape) {
  removerEventosDoMapa(map);
  executarRemocaoSeFuncao(removerEscape);
}

/**
 * üîé SearchControl
 *
 * Componente React que adiciona ao mapa Leaflet um controle de busca geocodificada,
 * permitindo pesquisar endere√ßos e adicionar marcadores interativos.
 * Garante a configura√ß√£o e limpeza de todos os eventos e controles ao montar/desmontar.
 *
 * @returns {null} N√£o renderiza elementos visuais; manipula apenas o mapa e controles externos
 */
export default function SearchControl() {
  const map = useMap();
  const markersRef = useRef([]);

  useEffect(() => {
    const removerEscape = configurarInteracoesDoMapa(map, markersRef);
    return () => limparInteracoes(map, removerEscape);
  }, [map]);

  return null;
}

// Sugest√µes futuras (se quiser evoluir):
// - Internacionaliza√ß√£o: traduzir os labels dinamicamente com base na l√≠ngua do usu√°rio.
// - Salvar o hist√≥rico de buscas com localiza√ß√µes favoritas.